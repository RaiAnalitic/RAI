import os
import logging
import requests
import re
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from dotenv import load_dotenv

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SOLSCAN_API_KEY = os.getenv("SOLSCAN_API_KEY")

if not OPENAI_API_KEY:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω API-–∫–ª—é—á OpenAI!")
if not SOLSCAN_API_KEY:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω API-–∫–ª—é—á Solscan!")

# FastAPI —Å–µ—Ä–≤–µ—Ä
app = FastAPI()

# –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class RequestBody(BaseModel):
    user_query: str

# –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è OpenAI
system_message = (
    "You are RAI, an advanced AI designed to analyze the meme coin market. "
    "You provide users with insights into token trends, risks, and opportunities. "
    "You ONLY discuss topics related to shitcoins, meme coins, and the crypto market. "
    "If a user asks about something unrelated to crypto, politely redirect them back to the topic."
)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ Solana CA (Public Key)
SOLANA_CA_PATTERN = r"\b[1-9A-HJ-NP-Za-km-z]{32,44}\b"

@app.post("/analyze")
async def analyze_or_chat(body: RequestBody):
    """ –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–≤—É—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: –æ–±—ã—á–Ω—ã–π —á–∞—Ç –∏ –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞ """
    user_query = body.user_query.strip()
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: %s", user_query)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ Solana CA
    match = re.search(SOLANA_CA_PATTERN, user_query)

    if match:
        return {"response": "üöÄ –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ CA –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."}  # –í—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –¥–µ–ª–∞–µ–º —á–∞—Ç

    else:
        # –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–µ—Ç CA, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ OpenAI
        headers = {"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"}
        payload = {
            "model": "gpt-4",
            "messages": [
                {"role": "system", "content": system_message},
                {"role": "user", "content": user_query}
            ],
            "max_tokens": 150,
            "temperature": 0.8
        }

        try:
            response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if response.status_code != 200:
                logger.error("–û—à–∏–±–∫–∞ OpenAI API: %s", response.text)
                return {"error": "‚ùå –û—à–∏–±–∫–∞ OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}
            
            response_data = response.json()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç–µ
            if "choices" in response_data and len(response_data["choices"]) > 0:
                answer = response_data["choices"][0].get("message", {}).get("content", "").strip()
                if not answer:
                    logger.error("OpenAI API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    return {"error": "‚ùå OpenAI API –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."}
                
                logger.info("–û—Ç–≤–µ—Ç –æ—Ç OpenAI: %s", answer)
                return {"response": answer}
            else:
                logger.error("–û—à–∏–±–∫–∞ OpenAI: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ %s", response_data)
                return {"error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI."}
        
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: %s", e)
            return {"error": "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}

@app.get("/")
async def root():
    return {"message": "RAI AI Chat & Token Analysis API. Use /analyze to interact with AI or analyze tokens by CA."}
